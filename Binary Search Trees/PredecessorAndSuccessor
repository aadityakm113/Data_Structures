import java.util.*;

public class PredecessorAndSuccessor {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Tree bst = new Tree();
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            int val = sc.nextInt();
            if (val < 0)
                break;
            bst.root = bst.insert(bst.root, val);
        }
        int key = sc.nextInt();
        bst.inorder(bst.root, key);
        if (bst.predecessor != null) {
            System.out.println(bst.predecessor.data);
        } else {
            System.out.println("No Predecessor");
        }
        if (bst.successor != null) {
            System.out.println(bst.successor.data);
        } else {
            System.out.println("No Successor");
        }
        sc.close();
    }
}

class Tree {
    class Node {
        int data;
        Node left, right;

        Node(int data) {
            this.data = data;
            this.left = this.right = null;
        }
    }

    Node root = null;
    Node predecessor = null;
    Node successor = null;
    boolean keyFound = false;

    public Node insert(Node curr, int val) {
        if (curr == null) {
            return new Node(val);
        } else if (val < curr.data) {
            curr.left = insert(curr.left, val);
        } else if (val > curr.data) {
            curr.right = insert(curr.right, val);
        }
        return curr;
    }

    public void inorder(Node curr, int key) {
        if (curr == null)
            return;

        inorder(curr.left, key);

        if (curr.data == key) {
            keyFound = true;
        } else if (curr.data < key) {
            predecessor = curr;
        } else {
            if (successor == null || curr.data < successor.data) {
                successor = curr;
            }
        }

        inorder(curr.right, key);
    }
}
